{"version":3,"sources":["auth/SignUp.module.css","auth/SignUp.js"],"names":["module","exports","SignUp","props","useContext","AuthContext","history","useHistory","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","name","password","formState","inputHandler","signupSubmitHandler","event","a","preventDefault","console","log","process","JSON","stringify","inputs","push","asOverlay","onClear","style","textAlign","paddingTop","className","classes","onSubmit","element","id","type","label","validators","VALIDATOR_EMAIL","errorText","onInput","VALIDATOR_REQUIRE","VALIDATOR_PASSWORD","VALIDATOR_EQUAL","disabled"],"mappings":"uIACAA,EAAOC,QAAU,CAAC,OAAS,yB,kLCgHZC,UA/FA,SAACC,GACDC,qBAAWC,KAAxB,IACMC,EAAUC,cAFQ,EAG8BC,cAA9CC,EAHgB,EAGhBA,UAAWC,EAHK,EAGLA,MAAOC,EAHF,EAGEA,YAAaC,EAHf,EAGeA,WAHf,EAKuBC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,KAAM,CACJF,MAAO,GACPC,SAAS,GAEXE,SAAU,CACRH,MAAO,GACPC,SAAS,KAGb,GApBsB,mBAKjBG,EALiB,KAKNC,EALM,KAuBlBC,GAvBkB,KAuBC,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DAC1BD,EAAME,iBACNC,QAAQC,IAAIC,gDAFc,kBAIGhB,EAAY,GAAD,OACjCgB,+CADiC,qBAEpC,OACAC,KAAKC,UAAU,CACbZ,KAAME,EAAUW,OAAOb,KAAKF,MAC5BD,MAAOK,EAAUW,OAAOhB,MAAMC,MAC9BG,SAAUC,EAAUW,OAAOZ,SAASH,QAEtC,CAAE,eAAgB,qBAZI,cAcxBT,EAAQyB,KAAK,UAdW,yGAAH,uDAkBzB,OACE,qCACGtB,GACC,8BACE,cAAC,IAAD,CAAgBuB,WAAS,MAG7B,cAAC,IAAD,CAAYtB,MAAOA,EAAOuB,QAASrB,IACnC,oBAAIsB,MAAO,CAAEC,UAAW,SAAUC,WAAY,QAA9C,sCACA,uBAAMC,UAAWC,IAAQpC,OAAQqC,SAAUlB,EAA3C,UACE,cAAC,IAAD,CACEmB,QAAQ,QACRC,GAAG,QACHC,KAAK,QACLC,MAAM,SACNC,WAAY,CAACC,eACbC,UAAU,mDACVC,QAAS3B,IAEX,cAAC,IAAD,CACEoB,QAAQ,QACRC,GAAG,OACHC,KAAK,OACLC,MAAM,eACNC,WAAY,CAACI,eACbF,UAAU,6CACVC,QAAS3B,IAEX,cAAC,IAAD,CACEoB,QAAQ,QACRC,GAAG,WACHC,KAAK,WACLC,MAAM,8LACNC,WAAY,CAACK,eACbH,UAAU,mDACVC,QAAS3B,IAEX,cAAC,IAAD,CACEoB,QAAQ,QACRC,GAAG,kBACHC,KAAK,WACLC,MAAM,2BACNC,WAAY,CAACM,YAAgB/B,EAAUW,OAAOZ,SAASH,QACvD+B,UAAU,uCACVC,QAAS3B,IAEX,cAAC,IAAD,CAAQsB,KAAK,SAASS,UAAWhC,EAAUH,QAA3C","file":"static/js/12.566b74b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SignUp\":\"SignUp_SignUp__2wB6v\"};","import React, { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Input from \"../shared/components/UIElements/Input\";\nimport Button from \"../shared/components/UIElements/Button\";\nimport LoadingSpinner from \"../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../shared/components/UIElements/ErrorModal\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_EQUAL,\n  VALIDATOR_PASSWORD,\n  VALIDATOR_REQUIRE,\n} from \"../utils/validators\";\nimport { useForm } from \"../shared/hook/form-hook\";\nimport { useHttpClient } from \"../shared/hook/http-hook\";\nimport { AuthContext } from \"../shared/context/auth-context\";\nimport classes from \"./SignUp.module.css\";\n\nconst SignUp = (props) => {\n  const auth = useContext(AuthContext);\n  const history = useHistory();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      name: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const signupSubmitHandler = async (event) => {\n    event.preventDefault();\n    console.log(process.env.REACT_APP_BACKEND_URL);\n    try {\n      const responseData = await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/api/users/signup`,\n        \"POST\",\n        JSON.stringify({\n          name: formState.inputs.name.value,\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value,\n        }),\n        { \"Content-Type\": \"application/json\" }\n      );\n      history.push(\"/login\");\n    } catch (err) {}\n  };\n\n  return (\n    <>\n      {isLoading && (\n        <div>\n          <LoadingSpinner asOverlay />\n        </div>\n      )}\n      <ErrorModal error={error} onClear={clearError} />\n      <h1 style={{ textAlign: \"center\", paddingTop: \"2rem\" }}>註冊帳號</h1>\n      <form className={classes.SignUp} onSubmit={signupSubmitHandler}>\n        <Input\n          element=\"input\"\n          id=\"email\"\n          type=\"email\"\n          label=\"E-mail\"\n          validators={[VALIDATOR_EMAIL()]}\n          errorText=\"請輸入有效的E-mail。\"\n          onInput={inputHandler}\n        />\n        <Input\n          element=\"input\"\n          id=\"name\"\n          type=\"text\"\n          label=\"暱稱\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"暱稱不得為空。\"\n          onInput={inputHandler}\n        />\n        <Input\n          element=\"input\"\n          id=\"password\"\n          type=\"password\"\n          label=\"密碼（請輸入6位數以上密碼，並至少包含一個英文字母及阿拉伯數字）\"\n          validators={[VALIDATOR_PASSWORD()]}\n          errorText=\"請輸入有效密碼。\"\n          onInput={inputHandler}\n        />\n        <Input\n          element=\"input\"\n          id=\"confirmPassword\"\n          type=\"password\"\n          label=\"確認密碼\"\n          validators={[VALIDATOR_EQUAL(formState.inputs.password.value)]}\n          errorText=\"請確認密碼！\"\n          onInput={inputHandler}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          註冊\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default SignUp;\n"],"sourceRoot":""}
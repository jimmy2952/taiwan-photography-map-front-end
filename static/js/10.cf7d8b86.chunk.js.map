{"version":3,"sources":["upload/Upload.module.css","shared/components/UIElements/ImageUpload.js","upload/Upload.js"],"names":["module","exports","ImageUpload","props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","id","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","marginLeft","src","alt","Button","onClick","current","click","Upload","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","imageTitle","value","imageDescription","imageCategory","imageCityLocation","imageDistrictLocation","imageScapeName","formState","inputHandler","history","useHistory","uploadImageHandler","a","preventDefault","formData","FormData","append","inputs","image","userId","process","Authorization","token","push","console","log","classes","LoadingSpinner","asOverlay","ErrorModal","onClear","onSubmit","Container1","errorText","Container2","margin","Input","element","label","validators","VALIDATOR_REQUIRE","initialValid","VALIDATOR_NONE","cityName","map","cityItem","index","districtLonLat","districtItem","districtName","disabled"],"mappings":"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","file":"static/js/10.cf7d8b86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Upload\":\"Upload_Upload__2Rlv3\",\"Container1\":\"Upload_Container1__Ujj2y\",\"Container2\":\"Upload_Container2__3avVM\"};","import React, { useRef, useState, useEffect } from \"react\"\nimport Button from \"./Button\"\n\nimport './ImageUpload.css'\n\nconst ImageUpload = props => {\n  const [file, setFile] = useState()\n  const [previewUrl, setPreviewUrl] = useState()\n  const [isValid, setIsValid] = useState(false)\n\n  const filePickerRef = useRef()\n\n  useEffect(() => {\n    if (!file) {\n      return\n    }\n    const fileReader = new FileReader()\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result)\n    }\n    fileReader.readAsDataURL(file)\n  }, [file])\n\n  const pickedHandler = event => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0]\n      setFile(pickedFile)\n      setIsValid(true)\n      fileIsValid = true\n    } else {\n      setIsValid(false)\n      fileIsValid = false\n    }\n    props.onInput(props.id, pickedFile, fileIsValid)\n  }\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click()\n  }\n\n  return(\n    <div className=\"form-control\">\n      <label>上傳照片</label>\n      <br/>\n      <input \n        id={props.id}\n        ref={filePickerRef}\n        style={{display: \"none\"}}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}` } style={{marginLeft:\"0\"}}>\n        <div className=\"image-upload__preview\" style={{marginLeft:\"0\"}}>\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>預覽照片</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>選擇照片</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default ImageUpload","import React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport ImageUpload from \"../shared/components/UIElements/ImageUpload\";\nimport Input from \"../shared/components/UIElements/Input\";\nimport Button from \"../shared/components/UIElements/Button\";\nimport districtLonLat from \"../utils/taiwan_district_lon_lat.json\";\nimport cityName from \"../utils/taiwanCityName.json\";\nimport { VALIDATOR_NONE, VALIDATOR_REQUIRE } from \"../utils/validators\";\nimport { useForm } from \"../shared/hook/form-hook\";\nimport { useHttpClient } from \"../shared/hook/http-hook\"\nimport { AuthContext } from \"../shared/context/auth-context\"\nimport classes from \"./Upload.module.css\";\nimport LoadingSpinner from \"../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../shared/components/UIElements/ErrorModal\"\n\nconst Upload = (props) => {\n  const auth = useContext(AuthContext)\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      imageTitle: {\n        value: \"\",\n        isValid: false,\n      },\n      imageDescription: {\n        value: \"\",\n        isValid: true,\n      },\n      imageCategory: {\n        value: \"\",\n        isValid: true,\n      },\n      imageCityLocation: {\n        value: \"\",\n        isValid: true,\n      },\n      imageDistrictLocation: {\n        value: \"\",\n        isValid: true,\n      },\n      imageScapeName: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const history = useHistory();\n\n  const uploadImageHandler = async(event) => {\n    event.preventDefault();\n    try {\n      const formData = new FormData();\n      formData.append(\"imageTitle\", formState.inputs.imageTitle.value);\n      formData.append(\"imageDescription\", formState.inputs.imageDescription.value);\n      formData.append(\"imageCategory\", formState.inputs.imageCategory.value);\n      formData.append(\"imageCityLocation\", formState.inputs.imageCityLocation.value);\n      formData.append(\"imageDistrictLocation\", formState.inputs.imageDistrictLocation.value);\n      formData.append(\"imageScapeName\", formState.inputs.imageScapeName.value);\n      formData.append(\"image\", formState.inputs.image.value);\n      formData.append(\"creator\", auth.userId)\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/api/images`,\n        \"POST\", formData, {\n          Authorization: \"Bearer \" + auth.token\n        }\n      );\n     history.push(\"/discover\")\n    } catch (err) {}\n    console.log(formState.inputs)\n  };\n\n  return (\n    <section className={classes.Upload}>\n      {isLoading && <div><LoadingSpinner asOverlay/></div>}\n      <ErrorModal error={error} onClear={clearError} />\n      <form onSubmit={uploadImageHandler}>\n        <div className={classes.Container1}>\n          <ImageUpload\n            id=\"image\"\n            onInput={inputHandler}\n            errorText=\"請上傳照片\"\n          />\n        </div>\n        <div className={classes.Container2} style={{ margin: \"0 auto\" }}>\n          <Input\n            element=\"input\"\n            id=\"imageTitle\"\n            type=\"text\"\n            label=\"作品標題(必填)\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"請輸入標題\"\n            onInput={inputHandler}\n          />\n          <Input\n            id=\"imageDescription\"\n            label=\"作品描述\"\n            initialValid={true}\n            element=\"textarea\"\n            validators={[VALIDATOR_NONE()]}\n            onInput={inputHandler}\n          />\n          <Input\n            id=\"imageCategory\"\n            label=\"拍攝類別(必選)\"\n            element=\"select\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_NONE()]}\n          >\n            <option>請選擇類別</option>\n            <option>風景</option>\n            <option>人像</option>\n          </Input>\n          <Input\n            id=\"imageCityLocation\"\n            label=\"拍攝地點(必選)\"\n            element=\"select\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_NONE()]}\n          >\n            {cityName.map((cityItem, index) => {\n              return (\n                <option key={index} value={cityItem.cityName}>\n                  {cityItem.cityName}\n                </option>\n              );\n            })}\n          </Input>\n          <Input\n            id=\"imageDistrictLocation\"\n            element=\"select\"\n            onInput={inputHandler}\n            validators={[VALIDATOR_NONE()]}\n          >\n            {districtLonLat.map((districtItem, index) => {\n              return districtItem.cityName ===\n                formState.inputs.imageCityLocation.value ? (\n                <option key={index} value={districtItem.districtName}>\n                  {districtItem.districtName}\n                </option>\n              ) : (\n                false\n              );\n            })}\n          </Input>\n\n          <Input\n            element=\"input\"\n            id=\"imageScapeName\"\n            type=\"text\"\n            label=\"景點名稱(必填)\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"請輸入景點名稱\"\n            onInput={inputHandler}\n          />\n          <div>\n            <Button type=\"submit\" disabled={!formState.isValid}>\n              上傳\n            </Button>\n          </div>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default Upload;\n"],"sourceRoot":""}